package outline;

import java.awt.Component;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.ArrayList;
import java.util.Enumeration;

import javax.swing.AbstractButton;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JTextField;
import javax.swing.border.EmptyBorder;

public class Today {
	
	public static JPanel todayButtons;
	public static JPanel todayInfo;
	
	private String[] timePeriods =  {"Morning", "Afternoon", "Evening", "Night"};
	
	public static String[] options = {"Add", "Edit", "Delete"};
	
	private ArrayList<JTextField> changingTodayActivities = new ArrayList<JTextField>();
	private ArrayList<String> changingTodayPeriods = new ArrayList<String>();
	
	private ArrayList<JButton> deleteTodayActivities = new ArrayList<JButton>();
	private ArrayList<String> deleteTodayPeriods = new ArrayList<String>();
	
	private ArrayList<JLabel> dragTodayActivities = new ArrayList<JLabel>();
	private ArrayList<String> dragTodayPeriods = new ArrayList<String>();
	
	JButton updateButton;

	public void show(JFrame frame, JPanel panel) {

		PersonalOrganiserGUI.clearContent();
		PersonalOrganiserGUI.clearSubMenu();
		
		displayTodayButtons(frame, panel);
		
		displayTodayInfo(frame, panel, "JLabel");
		
		frame.setVisible(true);

	}
	
	public boolean checkIfAlreadyDisplayed(JPanel panel) {
		boolean check = false;
		
		Component[] components = panel.getComponents();
		
		for (int i = 0; i < components.length; i++) {

			try {
				if (components[i].getName().equals("todayPanel")) {
					if (components[i].isVisible())
						check = true;
				}
			} catch (Exception e) {}
		}
		
		return check;
	}
	
	public void displayTodayButtons(JFrame frame, JPanel panel) {
		todayButtons = new JPanel();
		todayButtons.setName("todayPanel");
		todayButtons.setBackground(Style.colorSubMenuBackground);
		
		ListenForMouse mouseListener = new ListenForMouse();
		ListenToAction actionListener = new ListenToAction(frame, panel);
		
		for (String name : options) {
			JButton button = Style.styleSubMenuButtons(name);
			button.setName(name + "Today");
			button.addActionListener(actionListener);
			button.addMouseListener(mouseListener);
			todayButtons.add(button);
		}
			
		todayButtons.setAlignmentX(JFrame.CENTER_ALIGNMENT);
		todayButtons.setAlignmentY(JFrame.BOTTOM_ALIGNMENT);
		panel.add(todayButtons);
	}
	
	public void displayTodayInfo(JFrame frame, JPanel panel, String outputType) {
		String[] allActivities = new TodayData().selectAllActivities();
		
		todayInfo = new JPanel(new GridLayout(1, 4));
		todayInfo.setBackground(Style.colorOutputBackground);
		todayInfo.setBorder(new EmptyBorder(10, 10, 10, 10));
		
		// creating panels for each period of the day (timePeriods)
		JPanel[] periodPanels = new JPanel[4];
		for (int i = 0; i < periodPanels.length; i++) {
			periodPanels[i] = new JPanel(new GridLayout(4,1));
			periodPanels[i].setBackground(Style.colorOutputBackground);
			periodPanels[i].setBorder(new EmptyBorder(10, 10, 10, 10));
		}
		
		// Adding JLabel title to each panel corresponding to the time period
		for (int i = 0; i < 4; i++) {
			JLabel title = new JLabel(timePeriods[i]);
			title.setBorder(new EmptyBorder(3,3,3,3));
			periodPanels[i].add(title);
		}
		
		for (int i = 0; i < allActivities.length; i += 2) {
			
			JComponent activity = null;
			if (outputType.equals("JLabel")) {
				activity = new JLabel("- " + allActivities[i]);
				int index = i/2 + 1;
				activity.setName("dragLabel" + index);
				dragTodayActivities.add((JLabel) activity);
				dragTodayPeriods.add(allActivities[i+1]);
				
				final int finali = i;
				activity.addMouseListener(new MouseListener() {
					
					int x, y;
					
					@Override
					public void mouseClicked(MouseEvent e) {					
						
					}

					@Override
					public void mouseEntered(MouseEvent e) {
						// TODO Auto-generated method stub
						
					}

					@Override
					public void mouseExited(MouseEvent e) {
						// TODO Auto-generated method stub
						
					}

					@Override
					public void mousePressed(MouseEvent e) {
						x = e.getX();
						y = e.getY();
						
					}

					@Override
					public void mouseReleased(MouseEvent e) {
						JLabel source = (JLabel) e.getSource();
						JLabel labelSecond = null;
						JLabel labelFirst = null;
						
						int newx = e.getX();
						int newy = e.getY();
						

//						if (allActivities[finali+1].equals("M")) {
//							labelFirst = (JLabel) periodPanels[0].findComponentAt(x, y);
//							labelSecond = (JLabel) periodPanels[0].findComponentAt(newx, newy);
//						}	
//						else if (allActivities[finali+1].equals("A")) {
//							labelFirst = (JLabel) periodPanels[1].findComponentAt(x, y);
//							labelSecond = (JLabel) periodPanels[1].findComponentAt(newx, newy);
//						}	
//						else if (allActivities[finali+1].equals("E")) {
//							labelFirst = (JLabel) periodPanels[2].findComponentAt(x, y);
//							labelSecond = (JLabel) periodPanels[2].findComponentAt(newx, newy);
//						}		
//						else if (allActivities[finali+1].equals("N")) {
//							labelFirst = (JLabel) periodPanels[3].findComponentAt(x, y);
//							labelSecond = (JLabel) periodPanels[3].findComponentAt(newx, newy);
//						}
						
						System.out.println(x + "," + y);
						System.out.println(e.getX() + "," + e.getY());
						
//						System.out.println("first:" + labelFirst.getText());
//						System.out.println("second:" + labelSecond.getText());
						
						
						
						
						
					}
					
				});
				
			}
			else if (outputType.equals("JTextField")) {
				activity = new JTextField("- " + allActivities[i]);
				changingTodayActivities.add((JTextField) activity);
				changingTodayPeriods.add(allActivities[i+1]);
			}
			else if (outputType.equals("JButton")) {
				activity = Style.styleDeleteButtons("- " + allActivities[i]);
				deleteTodayActivities.add((JButton) activity);
				deleteTodayPeriods.add(allActivities[i+1]);
				final int finali = i;
				((JButton) activity).addActionListener(new ActionListener() {
					@Override
					public void actionPerformed(ActionEvent e) {
						new TodayData().deleteActivity(allActivities[finali], allActivities[finali+1]);
						PersonalOrganiserGUI.clearContent();
						displayTodayInfo(frame, panel, "JButton");
						
					}
				});
			}
			else
				System.out.println("error: no valid output button type provided (outputType)");
			
			if (allActivities[i+1].equals("M")) {
				periodPanels[0].add(activity);
			}	
			else if (allActivities[i+1].equals("A")) {
				periodPanels[1].add(activity);
			}	
			else if (allActivities[i+1].equals("E")) {
				periodPanels[2].add(activity);
			}		
			else if (allActivities[i+1].equals("N")) {
				periodPanels[3].add(activity);
			}		
		}
		
		todayInfo.add(periodPanels[0]); // morning
		todayInfo.add(periodPanels[1]); // afternoon
		todayInfo.add(periodPanels[2]); // evening 
		todayInfo.add(periodPanels[3]); // night
		
		todayInfo.setAlignmentX(JFrame.CENTER_ALIGNMENT);
		todayInfo.setAlignmentY(JFrame.BOTTOM_ALIGNMENT);
		panel.add(todayInfo);
		frame.setVisible(true);
	}

	public void displayAddActivity(JFrame frame, JPanel panel) {
		PersonalOrganiserGUI.clearContent();
		
		JPanel addActivityPanel = new JPanel(new GridLayout(0,1));
		
		ButtonGroup group = new ButtonGroup();
		for (int i = 0; i < timePeriods.length; i++) {
			JRadioButton button = new JRadioButton(timePeriods[i]);
			addActivityPanel.add(button);
			group.add(button);
		}
		
		addActivityPanel.add(new JLabel("Specify activity"));
		
		JTextField activity = new JTextField();
		addActivityPanel.add(activity);
		
				
		int response = JOptionPane.showConfirmDialog(null, addActivityPanel, "Add an activity", 
				JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);
		if (response == JOptionPane.OK_OPTION) {
			String selectedButton = getSelectedButtonText(group);
			if (selectedButton == null) {
				JOptionPane.showMessageDialog(addActivityPanel, "You need to select a period");
			}
			else {
				new TodayData().addActivity(activity.getText(), selectedButton.charAt(0));
			}
		}
		
		
		displayTodayInfo(frame, panel, "JLabel");
	}
	
	public String getSelectedButtonText(ButtonGroup buttonGroup) {
		for (Enumeration<AbstractButton> buttons = buttonGroup.getElements(); buttons.hasMoreElements();) {
			AbstractButton button = buttons.nextElement();
			
			if (button.isSelected()) {
				return button.getText();
			}
		}
		return null;
	}

	public void displayEditActivity(JFrame frame, JPanel panel) {
		PersonalOrganiserGUI.clearContent();
		PersonalOrganiserGUI.clearSubMenu();
		displayTodayButtons(frame, panel);
		
		ListenForMouse mouseListener = new ListenForMouse();
		
		updateButton = Style.styleSubMenuButtons("Update");
		updateButton.setName("updateToday");
		updateButton.setForeground(Style.colorUpdateButton);
		updateButton.addMouseListener(mouseListener);
		
		updateButton.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				if (((Component) e.getSource()).getName().equals("updateToday"))
						sendChangingData();
			}
		});
		
		todayButtons.add(updateButton);
		
		displayTodayInfo(frame, panel, "JTextField");
	}
	
	public void sendChangingData() {
		ArrayList<String> allActivities = new ArrayList<String>();
		
		for (int i = 0; i < changingTodayActivities.size(); i++) {
			allActivities.add(changingTodayActivities.get(i).getText().substring(2, changingTodayActivities.get(i).getText().length()));
			allActivities.add(changingTodayPeriods.get(i));
		}
		
		new TodayData().updateData(allActivities.toArray(new String[allActivities.size()]));
		
		changingTodayActivities.clear();
		changingTodayPeriods.clear();
		try {
			updateButton.setVisible(false);
		} catch(Exception e) {}
	}
		

	public void displayDeleteActivity(JFrame frame, JPanel panel) {
		
		
		PersonalOrganiserGUI.clearContent();
		PersonalOrganiserGUI.clearSubMenu();
		displayTodayButtons(frame, panel);
		displayTodayInfo(frame, panel, "JButton");
		

	}
}
